<?php


namespace Conman\Resolver;


use Closure;

class ConfigResolver extends Resolver {

    public $globals;
    public $defaults;
    public $overrides;

    public $resolved;

    protected $base = 'definitions';

    public function __construct(array $args = array()) {
        parent::__construct($args); // TODO: Change the autogenerated stub

        $this->globals = $this->resolve('globals');
    }

    public function resolve($role){
        $this->defaults = $this->loadConfigSource($role, 'defaults');
        $this->overrides = new UndefinedOption();

        $this->applyRules($role);

        return $this->merge($this->defaults, $this->overrides);
    }

    public function apply($role, $target, $rule){

        $overrides = $this->loadConfigSource($role, "targets/$target");
        if(!$rule['inherit']){
            $this->defaults = [];
            $this->overrides = [];
        }
        $this->overrides = $this->merge($this->overrides, $overrides);

    }

    private function merge($base, $new){

        if($new instanceof Closure){
            $new = call_user_func($new, $base);
        }

        if($base instanceof Closure){
            $base = call_user_func($base, $new);
        }

        $recurse = (is_array($new) && !empty($new))
            || (is_array($base) && !empty($base) && $new instanceof UndefinedOption);

        if($recurse){
            $keys = array();
            if(is_array($base))
                $keys = array_keys($base);
            if(is_array($new))
                $keys = array_merge($keys, array_keys($new));

            $output = array();
            foreach($keys as $key){
                $output[$key] = $this->merge(
                    is_array($base) ? ( array_key_exists($key, $base) ? $base[$key] : new UndefinedOption() ) : $base,
                    is_array($new) ? ( array_key_exists($key, $new) ? $new[$key] : new UndefinedOption() ) : $new
                    //is_array($base) && isset($base[$key]) ? $base[$key] : new UndefinedOption(),
                    //is_array($new) && isset($new[$key]) ? $new[$key] : new UndefinedOption()
                );
            }

            return $output;
        }
        else {
            if($new instanceof UndefinedOption)
                return $base instanceof UndefinedOption ? null : $base;
            else
                return $new;
        }
    }

}